{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pla",
				"playing"
			],
			[
				"run",
				"running"
			],
			[
				"play",
				"playing"
			],
			[
				"KE",
				"KEYDOWN"
			],
			[
				"soun",
				"sound_dir"
			],
			[
				"sou",
				"sound_dir"
			],
			[
				"jump",
				"jumping"
			],
			[
				"KEY",
				"KEYUP"
			],
			[
				"hit",
				"hit"
			],
			[
				"wal",
				"walking_frames_l"
			],
			[
				"sta",
				"standing_frames"
			],
			[
				"jum",
				"jumping"
			],
			[
				"walki",
				"walking_frames_l"
			],
			[
				"walk",
				"walking_frames_r"
			],
			[
				"load",
				"load_images"
			],
			[
				"spr",
				"spritesheet"
			],
			[
				"get",
				"get_image"
			],
			[
				"sprite",
				"spritesheet"
			],
			[
				"hihg",
				"highscore"
			],
			[
				"high",
				"highscore"
			],
			[
				"s",
				"self"
			],
			[
				"sc",
				"score"
			],
			[
				"wait",
				"wait_for_key"
			],
			[
				"ren",
				"render_text"
			],
			[
				"re",
				"render_text"
			],
			[
				"text",
				"text_rect"
			],
			[
				"font",
				"font_name"
			],
			[
				"ra",
				"randrange"
			],
			[
				"plat",
				"platform_group"
			],
			[
				"HE",
				"HEIGHT-40"
			],
			[
				"FI",
				"FRICTION"
			],
			[
				"pl",
				"Player"
			],
			[
				"ve",
				"vel"
			],
			[
				"Pla",
				"Platform"
			],
			[
				"Wi",
				"WIDTH"
			],
			[
				"get_",
				"get_rect"
			],
			[
				"snak",
				"snake_segments"
			],
			[
				"blo",
				"block"
			],
			[
				"r",
				"rect"
			],
			[
				"block",
				"block"
			],
			[
				"blok",
				"block_list"
			],
			[
				"ba",
				"ball"
			],
			[
				"ran",
				"random"
			],
			[
				"eve",
				"every_sprite_list"
			],
			[
				"__",
				"__init__"
			],
			[
				"ball",
				"ballychange"
			],
			[
				"movi",
				"movie_screen"
			],
			[
				"gma",
				"gmail"
			],
			[
				"c_dot_up_left",
				"c_dot_up_left"
			],
			[
				"c_",
				"c_dot_down3"
			],
			[
				"c_dot_do",
				"c_dot_down2"
			],
			[
				"c_dot_",
				"c_dot_down"
			],
			[
				"cd",
				"c_dot_up4"
			],
			[
				"gr",
				"green_rect"
			],
			[
				"she",
				"shesajvarebeli1"
			],
			[
				"ex",
				"executableaxiom"
			],
			[
				"ax",
				"axiom"
			],
			[
				"c",
				"current"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "# x`!/usr/bin/python3\n#Platform game\n#Background music: IZECOLD ft. Molly Ann - Close (Brooks Remix)\nimport pygame as pg\nimport random , ctypes\nfrom settings import *\nfrom sprites import *\nfrom os import path\n\nclass Game:\n\tdef __init__(self):\n\t\t# Initilize game window\n\t\tpg.init()\n\t\tpg.mixer.init()\n\t\ttry:\n\t\t\traise  TypeError\n\t\t\tuser32 = ctypes.windll.user32\n\t\t\tscreenSize =  user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)\n\t\t\tsize = (screenSize)\n\t\t\tself.screen = pg.display.set_mode((size) , pg.FULLSCREEN)[]\n\t\texcept:\n\t\t\tself.screen = pg.display.set_mode((WIDTH,HEIGHT),pg.RESIZABLE)\n\t\tpg.display.set_caption(TITLE)\n\t\tself.clock = pg.time.Clock()\n\t\tself.running = True\n\t\tself.font_name = pg.font.match_font(FONT_NAME)\n\t\tself.load_data()\n\n\tdef load_data(self):\n\t\t#Loading high score\n\t\tself.dir = path.dirname(__file__)\n\t\twith open(path.join(self.dir,HS_FILE), 'r+') as f:\n\t\t\ttry:\n\t\t\t\tself.highscore = int(f.read())\n\t\t\texcept :\n\t\t\t\tself.highscore = 0\n\t\t#Loading spirte sheet\n\t\timg_dir = path.join(self.dir, 'Spritesheets')\n\t\tself.spritesheet = Spritesheet(path.join(img_dir,SPRITE_FILENAME))\n\t\tself.sound_dir = path.join(self.dir,'sounds')\n\t\tself.jump_sound = pg.mixer.Sound(path.join(self.sound_dir,'jump37.wav'))\n\n\tdef new(self):\n\t\tpg.mixer.music.load(path.join(self.sound_dir,'izecold.mp3'))\n\t\tpg.mixer.music.play(loops=-1)\n\t\t# Start a new game\n\t\tself.score = 0\n\t\tself.all_sprites = pg.sprite.Group()\n\t\tself.platform_group = pg.sprite.Group()\n\t\tself.player = Player(self)\n\t\tself.all_sprites.add(self.player)\n\t\tfor plat in PLATFORM_LIST:\n\t\t\tp = Platform(self,*plat)\n\t\t\tself.all_sprites.add(p)\n\t\t\tself.platform_group.add(p)\n\t\tself.run()# every time new game start run Game loop\n\tdef run(self):\n\t\t# Game loop\n\t\tself.playing = True\n\t\twhile self.playing:\n\t\t\tself.clock.tick(FPS)\n\t\t\tself.events()\n\t\t\tself.update()#Logic\n\t\t\tself.draw()\n\tdef update(self):\n\t\t# Update\n\t\tself.all_sprites.update()\n\t\tif self.player.vel.y > 0:\n\t\t\thits = pg.sprite.spritecollide(self.player,self.platform_group,False)\n\t\t\tif hits:\n\t\t\t\tlowest = hits[0]\n\t\t\t\tfor hit in hits:\n\t\t\t\t\tif hit.rect.bottom > lowest.rect.bottom:\n\t\t\t\t\t\tlowest = hit\n\t\t\t\tif self.player.pos.y < lowest.rect.bottom:\n\t\t\t\t\tself.player.pos.y = lowest.rect.top + 1\n\t\t\t\t\tself.player.vel.y = 0 #Dening Gravity\n\t\t#Camera\n\t\tif self.player.rect.top <= HEIGHT/4:\n\t\t\tself.player.pos.y += max(abs(self.player.vel.y),2)\n\t\t\tfor plat in self.platform_group:\n\t\t\t\tplat.rect.y += max(abs(self.player.vel.y),2)\n\t\t\t\tif plat.rect.top >= HEIGHT:\n\t\t\t\t\tplat.kill()\n\t\t\t\t\tself.score += 10\n\n\t\t#Die\n\t\tif self.player.rect.bottom > HEIGHT:\n\t\t\tfor sprite in self.all_sprites:\n\t\t\t\tsprite.rect.y -= max(self.player.vel.y,10)\n\t\t\t\tif sprite.rect.bottom < 0:\n\t\t\t\t\tsprite.kill()\n\t\tif len(self.platform_group) == 0:\n\t\t\tself.playing = False\n\n\t\t#Spawning new platforms\n\t\twhile len(self.platform_group) < 6:\n\t\t\twidth = random.randrange(20,110)\n\t\t\tp = Platform(self,random.randrange(0,WIDTH-width),random.randrange(-50,-10))\n\t\t\tself.platform_group.add(p)\n\t\t\tself.all_sprites.add(p)\n\n\tdef events(self):\n\t\t# Event Handling\n\t\tfor event in pg.event.get():\n\t\t\t#check for closing window\n\t\t\tif event.type == pg.QUIT:\n\t\t\t\t#Exiting run loop\n\t\t\t\tif self.playing:\n\t\t\t\t\tself.playing = False\n\t\t\t#Exiting non-class loopdd\n\t\t\t\tself.running = False\n\t\t\tif event.type == pg.KEYDOWN:\n\t\t\t\tif event.key == pg.K_w:\n\t\t\t\t\tself.player.jump()\n\t\t\t\telif event.key == pg.K_q:\n\t\t\t\t\tself.playing = False\n\t\t\t\t\tself.running = False\n\n\n\tdef  draw(self):\n\t\t# Drawwing\n\t\tself.screen.fill(BGCOLOR)#Background\n\t\tself.all_sprites.draw(self.screen)\n\t\tself.screen.blit(self.player.image,self.player.rect)\n\t\tself.render_text(str(self.score), 22, WHITE, WIDTH/2, 15)\n\t\t# After Drawwing update everything\n\t\tpg.display.update()\n\n\n\tdef show_start_screen(self):\n\t\tpg.mixer.music.load(path.join(self.sound_dir,'openning.mp3'))\n\t\tpg.mixer.music.play(loops=-1)\n\t\t# Game Splash/Start Screen\n\t\tself.screen.fill(BGCOLOR)\n\t\tself.render_text(TITLE, 48, BLACK, WIDTH/2, HEIGHT/4)\n\t\tself.render_text('AD for move and W for jump', 22, BLACK, WIDTH/2, HEIGHT/2)\n\t\tself.render_text('Press any key to play', 22, BLACK, WIDTH/2, HEIGHT*3/4)\n\t\tself.render_text('High Score : '+str(self.highscore), 22, YELLOW, WIDTH/2, HEIGHT/6)\n\t\tpg.display.update()\n\t\tself.wait_for_key()\n\t\tpg.mixer.music.fadeout(500)\n\n\tdef show_end_screen(self):\n\t\t# Game \n\t\tpg.mixer.music.fadeout(500)\n\t\tpg.mixer.music.load(path.join(self.sound_dir,'ending.mp3'))\n\t\tpg.mixer.music.play(loops=-1)\n\t\tif not self.running:\n\t\t\treturn None\n\t\tself.screen.fill(BGCOLOR)\n\t\tself.render_text('GAME OVER', 48, BLACK, WIDTH/2, HEIGHT/4)\n\t\tself.render_text('Score:'+str(self.score), 22, BLACK, WIDTH/2, HEIGHT/2)\n\t\tself.render_text('Press any key to play', 22, BLACK, WIDTH/2, HEIGHT*3/4)\n\t\tif self.score > self.highscore:\n\t\t\tself.highscore = self.score\n\t\t\tself.render_text(\"New High Score: \"+str(self.highscore), 22, RED, WIDTH/2 , HEIGHT/2+50)\n\t\t\twith open(path.join(self.dir,HS_FILE), 'w') as f:\n\t\t\t\tf.write(str(self.highscore))\n\t\telse:\n\t\t\tself.render_text(\"High Score: \"+str(self.highscore), 22, RED, WIDTH/2 , HEIGHT/2+50)\n\t\tpg.display.update()\n\t\tself.wait_for_key()\n\t\tpg.mixer.music.fadeout(500)\n\tdef wait_for_key(self):\n\t\twaiting = True\n\t\twhile waiting:\n\t\t\tself.clock.tick(FPS/2)\n\t\t\tfor event in pg.event.get():\n\t\t\t\tif event.type == pg.QUIT:\n\t\t\t\t\twaiting = False\n\t\t\t\t\tself.running = False\n\t\t\t\tif event.type == pg.KEYUP:\n\t\t\t\t\twaiting = False\n\t\t\t\tif event.type == pg.KEYDOWN and event.key == pg.K_q:\n\t\t\t\t\tself.running = False\n\t\t\t\t\tself.playing = False\t\t\n\n\n\tdef render_text(self, text, size, color, x, y):\n\t\tfont = pg.font.Font(self.font_name, size)\n\t\ttext_surface = font.render(text, True, color)\n\t\ttext_rect = text_surface.get_rect()\n\t\ttext_rect.midtop = (x, y)\n\t\tself.screen.blit(text_surface, text_rect)\ng = Game()#Object\ng.show_start_screen()\nwhile g.running:\n\tg.new()\n\tg.show_end_screen()\npg.quit()",
			"file": "main.py",
			"file_size": 5994,
			"file_write_time": 131325020449669472,
			"settings":
			{
				"buffer_size": 5806,
				"line_ending": "Windows"
			}
		},
		{
			"file": "sprites.py",
			"settings":
			{
				"buffer_size": 3684,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Spritesheets/spritesheet_jumper.xml",
			"settings":
			{
				"buffer_size": 9333,
				"line_ending": "Unix"
			}
		},
		{
			"file": "settings.py",
			"settings":
			{
				"buffer_size": 592,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "highscore.txt",
			"settings":
			{
				"buffer_size": 3,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 256.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Build With: Python - Syntax Check"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 120.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": true,
		"show_open_files": false,
		"show_tabs": true,
		"side_bar_visible": false,
		"status_bar_visible": true
	},
	"file_history":
	[
		"/C/Users/nokro/Desktop/tst.py",
		"/C/Users/nokro/AppData/Roaming/Sublime Text 3/Packages/SublimeREPL/SublimeREPL.sublime-settings",
		"/C/Users/nokro/AppData/Roaming/Sublime Text 3/Packages/User/SublimeREPL.sublime-settings",
		"/D/__misho__/PlatformGame/Spritesheets/spritesheet_jumper.png",
		"/D/__misho__/PlatformGame/settings.py",
		"/D/__misho__/PlatformGame/highscore.txt",
		"/home/namper/Desktop/Platform_Game/settings.py",
		"/home/namper/Desktop/Platform_Game_WIN/main.py",
		"/home/namper/Desktop/Platform_Game_WIN/settings.py",
		"/usr/bin/python",
		"/D/__misho__/Platformer_Game/main_tample.py",
		"/C/Users/nokro/Desktop/___/Ball/test.py",
		"/C/Users/nokro/Desktop/DavalebaN3.py",
		"/C/Users/nokro/Desktop/GG.py",
		"/C/Users/nokro/Desktop/___/Ball/game.py",
		"/C/Users/nokro/Desktop/___/Ball/snake.py",
		"/C/Users/nokro/Desktop/GlowHokey.py",
		"/C/Users/nokro/Desktop/Time_it.py",
		"/C/Python27/DLLs/_ctypes.pyd",
		"/C/Python27/DLLs/_hashlib.pyd",
		"/C/Python27/DLLs/sqlite3.dll",
		"/C/Users/nokro/Desktop/this_will_become_actual_game.py",
		"/C/Users/nokro/Desktop/Calculator.py",
		"/C/Users/nokro/Desktop/parser.py",
		"/C/Python27/lib/argparse.py",
		"/C/Windows/System32/drivers/etc/hosts",
		"/C/Users/nokro/Desktop/___/davaleba_2_choto&ikiko.py",
		"/C/Users/nokro/Desktop/zrdadoba.py",
		"/C/Users/nokro/Desktop/keylogger_by_namper_python2.7.111/keylogger_by_namper.pyw",
		"/C/Users/nokro/Desktop/keylogger_by_namper_python2.7.111/setup.py",
		"/C/Users/nokro/Desktop/keylogger_by_namper_python2.7.111/24_emailsending.pyw",
		"/C/Users/nokro/Desktop/test.py",
		"/C/Users/nokro/Desktop/keylogger_by_misho_python2.7.111/keylogger_by_misho.pyw",
		"/C/Users/nokro/Desktop/keylogger_by_misho.pyw",
		"/C/Users/nokro/Desktop/24_emailsending.pyw",
		"/C/Users/nokro/Desktop/Tetris/tetris.py",
		"/C/Users/nokro/Desktop/Bike__/bikegame.py",
		"/C/Users/nokro/Desktop/AaBbCcDd.py",
		"/C/Users/nokro/Documents/My Games/Smite/BattleGame/Logs/Launch-backup-2016.12.29-14.15.35.log",
		"/C/Users/nokro/AppData/Local/Programs/Python/Python36/Lib/site-packages/pip/utils/__pycache__/setuptools_build.cpython-36.pyc",
		"/C/Users/nokro/Desktop/l_system_cantor_set.py",
		"/C/Users/nokro/Desktop/l_system_sierpenski3D.py",
		"/C/Users/nokro/Desktop/l_system_sierpenski.py",
		"/C/Users/nokro/Desktop/l_system_class.py",
		"/C/Users/nokro/Desktop/l_system_arch.py",
		"/C/Users/nokro/Desktop/l_system_rectangle.py",
		"/C/Users/nokro/Desktop/salobiiaamati.py",
		"/C/Users/nokro/Desktop/l-system.py",
		"/C/Users/nokro/Desktop/zizdema.py",
		"/C/Users/nokro/Desktop/tryjango1.8/server.py",
		"/C/Users/nokro/Desktop/server.py"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"2d",
			"vec",
			"vec =",
			"vec",
			"vector",
			"animate",
			"2",
			"p =",
			"4",
			"black"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"green"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5806,
						"regions":
						{
						},
						"selection":
						[
							[
								1701,
								1701
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false,
							"wrap_width": 120
						},
						"translation.x": 0.0,
						"translation.y": 976.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "sprites.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3684,
						"regions":
						{
						},
						"selection":
						[
							[
								498,
								501
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 156.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "Spritesheets/spritesheet_jumper.xml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9333,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/XML/XML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "settings.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 592,
						"regions":
						{
						},
						"selection":
						[
							[
								433,
								433
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 39.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "highscore.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3,
						"regions":
						{
						},
						"selection":
						[
							[
								1,
								1
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 22.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				0,
				1,
				1,
				2
			],
			[
				1,
				1,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			0.55390070922,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 23.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "Workspace.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\nokro\\Desktop\\tryjango1.8\\server.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 105.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 4
	}
}
